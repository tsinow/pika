name: Test

on:
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: RelWithDebInfo
  ARTIFACT_PIKA_NAME: artifact-pika

jobs:
  build_on_ubuntu:
    # The CMake configure and build commands are platform-agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19

      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2.13
        with:
          key: ubuntu-latest

      - name: Install Deps
        run: |
          sudo apt-get install -y autoconf libprotobuf-dev protobuf-compiler
          sudo apt-get install -y clang-tidy-12

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DUSE_PIKA_TOOLS=ON -DCMAKE_CXX_FLAGS_DEBUG=-fsanitize=address -D CMAKE_C_COMPILER_LAUNCHER=ccache -D CMAKE_CXX_COMPILER_LAUNCHER=ccache

      - name: Build
        # Build your program with the given configuration
        run: cmake --build build --config ${{ env.BUILD_TYPE }}

      - name: Cleanup
        run: |
          rm -rf  ./deps
          rm -rf ./buildtrees

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT_PIKA_NAME }}
          path: ${{ github.workspace }}/build/pika

      - name: Test
        working-directory: ${{ github.workspace }}/build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{ env.BUILD_TYPE }} --verbose

      - name: Unit Test
        working-directory: ${{ github.workspace }}
        run: ./pikatests.sh all clean

        # master on port 9221, slave on port 9231, all with 2 db
      - name: Start codis, pika master and pika slave
        working-directory: ${{ github.workspace }}/build
        run: |
          echo "hello"
          chmod +x ../tests/integration/start_master_and_slave.sh
          ../tests/integration/start_master_and_slave.sh
          chmod +x ../tests/integration/start_codis.sh
          ../tests/integration/start_codis.sh

      - name: Run Go E2E Tests
        working-directory: ${{ github.workspace }}/build
        run: |
          cd ../tools/pika_keys_analysis/
          go test -v ./...
          cd ../../tests/integration/
          chmod +x integrate_test.sh
          sh integrate_test.sh
